›Topic DEV/ASMED››ATARI Assembler Editor Reference››‘’’’’’’’’’’’’’’…›ü ÅÒÒÏÒ ÃÏÄÅÓ  ü›š’’’’’’’’’’’’’’ƒ›››Assembler Errors›› 1 Insufficient memory for assembly.› 2 For DEL xx,yy: xx not found.› 3 In mini-assembler, bad address.› 4 File can't be LOADed. Not binary?› 5 Undefined label reference.› 6 Syntax error in statement.› 7 Label defined more than once.› 8 Buffer overflow.› 9 Missing label before '*' or '='.›10 Value in 1-byte expression > 255.›11 Null string used where invalid.›12 Incorrect address/address type.›13 Phase error between Pass 1 and 2.›14 Undefined forward reference.›15 Line length maximum exceeded.›16 Unrecognized source statement.›17 Line number is too large.›18 LOMEM must be 1st cmd after boot.›19 Missing starting address.›››System Errors››128 BREAK pressed during I/O.›130 Non-existent device specified.›132 Command is invalid for device.›136 End-of-file reached.›137 Record length > 256 bytes.›138 Device didn't respond to command›139 Device didn't return ACK signal.›140 Serial bus input framing error.›142 Serial data frame overrun.›143 Serial data checksum error.›144 Device done error.›145 Bad read-after-write comparision›146 Unimplemented function on device›162 Disk full.›165 File name error.›››‘’’’’’’’’’’’’’’’’’…›ü ÅÄÉÔÏÒ ÃÏÍÍÁÎÄÓ ü›š’’’’’’’’’’’’’’’’’ƒ›››Statements›››An ASMED statement consists of up to›5 space-delimited fields:››LINE# LABEL INSTR OPERAND COMMENT›  ±     ²     ³      ´       µ ››LINE# is required.››If no LABEL is needed, at least two›spaces must preceed the INSTR.››A statement beginning with a ';'›is treated as a comment.››LINE# ;COMMENT››A comment at the end of the line›does not require a ';'.››Example:››0100 ;Change background›0110  *=$0600›0120 START LDA #$A4 New color›0130  STA $02C6›0140  RTS››or››0100 ;Change background›0110  *=$0600›0120 START›0130  LDA #$A4 New color›0140  STA $02C6›0150  RTS›››Starting and exiting›››NEW      Clears edit text buffer›DOS      Exits to DOS››From DOS, use CAR to return to ASMED.›››Auto Number Lines››NUM      Auto-number start=10 incr=10›         or resume existing sequence.››NUMnn    Auto-number start=10 incr=nn››NUMmm,nn Auto-number start=mm incr=nn›››Renumber Lines››REN      Renumber start=10 incr=10›RENnn    Renumber start=10 incr=nn›RENmm,nn Renumber start=mm incr=nn›››Delete Lines››DELxx    Deletes line number xx›DELxx,yy Deletes line numbers xx..yy›››Search for String››FIND/s/››    Find first occurrence of s››FIND/s/,A››    Find ALL occurrences of s››FIND/s/xx› ›    Find s if exists in line xx››FIND/s/xx,yy,A››    Find all occurrences of s for›    lines xx..yy›››Search and Replace String››REP/old/new››    Replace first occurrence of old›    with new.››REP/old/new/xx,yy››    Replace first occurrence of old›    with new for lines xx..yy.››REP/old/new/,A››    Replace ALL occurrences of old›    with new››REP/old/new/xx,yy,A››    Replace ALL occurrences of old›    with new for lines xx..yy.›››Memory Management››SIZE››mmmm1 mmmm2 mmmm3››Returns three addresses:›  1 Bottom of usable RAM...... Á ›  2 Top of edit text buffer... Â ›  3 Top of empty RAM.......... Ã ››0000›|   used   |› Á  (MEMLO)›|  source  |›|   code   |    ›|----------| Â   as source grows›|   free   |› Your obj origin (*=)›|  object  |›|   code   |›|----------|---  as object grows›|   free   |› Ã ›|   used   |›FFFF››Manage your object code origin (*=).›Origin must be VERY safely >  Â .›Tail of your object code <  Ã .››(or *=$0600 for very small programs)›››LOMEM mmmm››   Moves start of edit text buffer›   to a higher address, creating a ›   pocket of free RAM between DOS›   and edit text buffer.››    Á  Bottom of usable RAM›    Â  Top of edit text buffer›    Ã  Top of empty RAM  ››0000›|   used   |› A  (Old MEMLO) (02E7)›|   free   |›|----------| Á  (New MEMLO) (02E7)›|  source  |›|   code   |    ›|----------| Â   as source grows›|   free   |› Your obj origin (*=)›|  object  |›|   code   |›|----------|---  as object grows›|   free   |› Ã ›|   used   |›FFFF››NOTE: LOMEM must be the first command›executed after a cold start.››The LOMEM command alter the MEMLO›register at address 02E7.››See HELP MAP/MEMLO for more.››‘’’’’’’’’’’’’’’’’’’’’’’…›ü ÓÁÖÉÎÇ ÁÎÄ ÌÏÁÄÉÎÇ   ü›ü ÓÏÕÒÃÅ ÏÒ ÏÂÊÅÃÔ ÃÏÄÅü›š’’’’’’’’’’’’’’’’’’’’’’ƒ›››Save/Display Source WITH line numbers››    [#C:]›    [#E:]›    [#P:]›LIST[#D[n]:filename][,xx,yy]››    where xx,yy is optional line›    number range››LIST      Display full source›LISTnn    Display only line number nn›LISTxx,yy Display lines xx..yy›LIST#C:   Save source to cassette›LIST#E:   Send source to terminal›LIST#P:   Send source to printer››LIST#D[n]:filename›          Save source to file›››Save/Display Source - NO line numbers››     [#C:]›     [#E:]›     [#P:]›PRINT[#D[n]:filename][,xx,yy]››    where xx,yy is optional line›    number range (line numbers are›    excluded from the output)››PRINT<space> Display full source›PRINTnn      Display line number nn›PRINTxx,yy   Display lines xx..yy›PRINT#E:     Send source to terminal›PRINT#P:     Send source to printer›PRINT#C:     Save source to cassette››PRINT#D[n]:filename››           Save source to file›››Load Source Code›››ENTER#C:    ››    Load source from cassette››ENTER#D[n]:filename››    Load source from file›››Save Object Code/Binary Data›››SAVE#C:<start,end››    Save binary code or data in›    memory range start-end to›    cassette.››SAVE#D[n]:filename<start,end›          ›    Save binary code or data ›    from memory range start..end›    to a file.›››Load Object Code/Binary Data›››LOAD#C:››    Load binary code or data›    from cassette to memory.››LOAD#D[n]:filename›          ›    Load binary code or data ›    from file to memory.›››‘’’’’’’’’’’’’’’’’’’’’…›ü ÁÓÓÅÍÂÌÅÒ ÃÏÍÍÁÎÄÓ ü›š’’’’’’’’’’’’’’’’’’’’ƒ››ASM›    Assemble source code in residing›    in the edit text buffer.›››             [#P:]›             [#E:]›ASM[#Dn:src],[#Dn:lst,[#Dn:obj]››    Assemble source from file src›    optionally create listing for›    printer, terminal, or file lst›    optionally saving object code›    to file obj.››    If src is undefined ›    then use edit text buffer.››Examples:››ASM#D:FILE.ASM›    Assemble source from file.››ASM,#P:›    Assemble source in edit text›    buffer. Send listing to printer.››ASM,,#D:FILE.OBJ›    Assemble source in edit text›    buffer. Save object code to file.››ASM#D:FILE.ASM,#P:,#D:FILE.OBJ›    Assemble source from file›    Send listing to printer›    Save object code to file››‘’’’’’’’’’’’’’’’’’’’…›ü ÄÅÂÕÇÇÅÒ ÃÏÍÍÁÎÄÓ ü›š’’’’’’’’’’’’’’’’’’’ƒ››BUG Enter debugger›X   Return to editor›››Run Code at Memory Location››Gmmmm›G   Run code at current address››››Single-Step through Code››Smmmm›S   Next››Begin stepping at address mmmm.›Continue stepping using just 'S'.›››Display Memory as Raw Bytes››Dmmmm›Dmmmm,nnnn›D   Next››››Change Memory››Cmmmm <yy[,..]››C <yy[,..] ›    Change at current address››Example: ›Different ways to change 0601C4››C0601 <C4››C0600 <,C4››D0601›C <C4››D0600›C <,C4››Example:›Clear a small patch of memory››C0600 <00,00,00,00,00,00,00,00››››List/Disassemble Memory››Lmmmm›Lmmmm,nnnn›L   Next››››Mini Assembler››A›mmmm< asm_instr›< next_instr››Example:›A›0600< LDA #$B4›< STA $02C6›< RTS››Note: No support for labels.››››Display Registers››DR››   A=xx X=xx Y=xx P=xx S=xx››››Change Registers››CR <a,x,y,p,s››Where a,x,y,p,s is a new value to be›stored in the corresponding ›register. Unmodified registers can›be skipped.››Examples:››CR <42      Loads 42 into A›CR <,,42    Loads 42 into Y›CR <,0,0    Loads zeroes into X, Y›CR <,,,,E1  Loads E1 into S››››Move Memory›››Mmmmm<yyyy,zzzz››Copy block of memory from ›yyyy..zzzz to memory block starting›at address mmmm. Ranges should not›overlap.››››Verify Memory››Vmmmm<yyyy,zzzz››Compare block of memory from›yyyy..zzzz to memory block starting›at address mmmm. Show any›differences. Ranges should not ›overlap.›››‘’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’…›ü ÄÉÒÅÃÔÉÖÅÓ¯ÐÓÅÕÄÏ ÉÎÓÔÒÕÃÔÉÏÎÓ ü›š’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’’ƒ›››*= Set Origin›››Set the starting address for the›assembled program.››Example: Code is assembled starting›at address $0600.››0100   *=$°¶°°›0110 START›0120   LDA #$44›0130   STA $02C6›0140   RTS››ASM››0000        0100        *=   $0600›            0110 START›°¶°° A944   0120        LDA  #$44›0602 8DC602 0130        STA  $02C6›0605 60     0140        RTS››0 ERRORS››BUG››D°¶°°,0605››°¶°° A9 44 8D C6 02 60›››Labels›››LABEL[=nnnn]››Labels give a name to a value. The ›assembler will substitute future›occurrences of the name with the›declared value.››Labels:››` must be declared one space›  after a line number.››` by itself (no =nnnn)›  represent the assembly address at›  its location in the program. This›  is useful for branches.››` can include mathematical›  expressions.››` used with .BYTE, .WORD, or .DBYTE›  work as a variable name.›››Examples:››0100  *=$0600›0110 MYLOC=$A000›0120  LDA #MYLOC&$00FF (LO)›0130  STA $CC›0140  LDA #MYLOC/$FF   (HI)›0150  STA $CD›0160  RTS››ASM,#N1:MYVAR.LST››0000      0100    *=  $0600›A000      0110 MYVAR = Á°°°›0600 A9°° 0120    LDA #MYLOC&$00FF›0602 85CC 0130    STA $CC›0604 A9Á° 0140    LDA #MYLOC/$FF›0606 85CD 0150    STA $CD›0608 60   0160    RTS›››0100  *=$0600›0110 COLOR2=$02C6›0120  LDA COLOR2 Get curr bg color›0130  STA CURRBG›0140  RTS›0150 ;variables:›0150 CURRBG .BYTE $00›››.BYTE›››.BYTE nn[,nn,..]›.BYTE "CCC..."[,..]››Reserve memory at the current ›assembly address for a series of›one or more integers or characters.›Integers can be entered as decimal›or hexadecimal literals.››Examples:››0100   *=$0600›0110 MYINT›0120   .BYTE $FF›0130 MYSTR›0140   .BYTE "HELLO",$9B››Assembles to:›0600 FF 48 45 4C 4C 4F 9B›››.WORD›››.WORD nnnn››Reserve memory at the current›assembly addres for a two-byte›expression. The bytes are stored›in memory low byte first.››0100   *=$0600›0110 MYVAR›0120   .WORD $±²34››Assembles to:›0600 34 ±²››.WORD should be a better choice for›storing addresses or integers.››››.DBYTE›››.DBYTE nnnn››Reserve memory at the current›assembly address for a two-byte›expression. The bytes are stored›in memory high-byte first.››0100   *=$0600›0110 MYVAR›0120   .DBYTE $±²34››Assembles to:›0600 ±² 34››.DBYTE is a better choice for›storing raw data, not for storing›addresses and integers.››››.TITLE and .PAGE›››.TITLE "Program Description"›.PAGE "Page Description"››The text in quotes is included at the›top of printed listing pages.››Typically, there is one .TITLE›directive declared with, say, the›program name and date.››And .PAGE might be used to declare›the beginning of each major section›of code.››.PAGE forces a page break. The .TITLE›and .PAGE text will appear at the top›of the next page.›››.TAB›››.TAB n1,n2,n3››Sets the offset from the left margin›for the statement fields.›› n1: instruction field› n2: operand field› n3: comment field››0100  .TAB 10,15,20›0110 COLOR2=$02C6 BACK›0120  *=$0600›0130 START›0140  LDA #$A4›0150  STA COLOR2›0160  RTS››ASM,#N1:COLOR2.LST››will generate a listing file like:››0000        0100      .TAB ±°,±µ,²°›02C6        0110 COLOR2=   $02C6 BACK›0000        0120      *=   $0600 |›            0130 START           |›0600 A9A4   0140      LDA  #$A4  |›0602 8DC602 0150      STA  COLOR2|›0605 60     0160      RTS  |     |›            |         |    |     |›             ±°     |     |›             ±µ      |›             ²° ››The intent of .TAB is to help›minimize memory usage in the edit›text buffer while enabling readable›listings.›››.IF›››.IF conditionally assembles a block›of code between .IF and LABEL›if expr evaluates to zero.››0100 .IF expr @LABEL››... assembled if expr ...›... evaluates to zero ...› ›0120 LABEL››Example:››0100 VER=0  0=NTSC 1=PAL›0110  *=$0600›0120 ;---- NTSC ----›0130  .IF VER @END00›0140  LDA #$A4›0150 END01›0160 ;---- PAL ----›0170  .IF 1-VER @END01›0180  LDA #$C4›0190 END01›0200  RTS››››.END›››.END terminates assembly.››Not technically required but the›original manual suggests placing the›directive near the end of your source›code.›››.OPT›››The .OPT directive enables or›disables some features of the›Assembler Editor program.››Options can be combined on the›same line. Such as,››0100 .OPT NOLIST,NOOBJ›››.OPT [NO]LIST›››.OPT LIST    (default)›.OPT NOLIST  (disables listing)››Example:››0100 ®ÏÐÔ ÎÏÌÉÓÔ›0110›     These lines will not›     participate in listings.›0190›0200 ®ÏÐÔ ÌÉÓÔ›››.OPT [NO]OBJ›››.OPT OBJ     (default)›.OPT NOOBJ   (disables assembly)››Example:››0100 ®ÏÐÔ ÎÏÏÂÊ›0110›     These lines will not›     participate in assembly.›0190›0200 ®ÏÐÔ ÏÂÊ›››.OPT [NO]ERR›››.OPT ERR     (default)›.OPT NOERR   (disables error msgs)››Example:››0100 ®ÏÐÔ ÎÏÅÒÒ›0110›     Any errors in these lines›     will not be printed.›0190›0200 ®ÏÐÔ ÅÒÒ›››.OPT [NO]EJECT›››.OPT EJECT   (default)›.OPT NOEJECT (disables printer eject)››When creating a listing, the›assembler normally generates 4 blank›lines per 56 lines of source code.››These two options enable or disable›this feature.››Example:››0100 ®ÏÐÔ ÎÏÅÊÅÃÔ›0110›     No end-of-page padding will›     occur for these lines.›0190›0200 ®ÏÐÔ ÅÊÅÃÔ››